
import { Injectable, signal } from '@angular/core';
import { GoogleGenAI, GenerateContentResponse } from '@google/genai';
import { LlmProvider, LlmProviderId } from '../models/llm.model';

// This is a placeholder for a secure way to access the API key.
// In a real app, this would be handled by a backend proxy or a secure environment variable setup.
declare const process: any;

@Injectable({ providedIn: 'root' })
export class LlmService {
  private ai: GoogleGenAI | null = null;

  // In a real app, API keys would be stored securely, not here.
  // This is for demonstration UI purposes.
  apiKeys = signal<Record<LlmProviderId, string>>({
    google: 'Using Environment Variable',
    openai: '',
    openrouter: '',
    ollama: '',
    custom: ''
  });

  constructor() {
    try {
      // API key must be obtained from process.env.API_KEY
      if (typeof process !== 'undefined' && process.env && process.env.API_KEY) {
        this.ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
      } else {
        console.warn('Google GenAI API Key not found in process.env.API_KEY. Google provider will not be available.');
      }
    } catch (error) {
      console.error('Failed to initialize GoogleGenAI:', error);
    }
  }

  async generateArticle(prompt: string, provider: LlmProviderId): Promise<string> {
    switch (provider) {
      case 'google':
        return this.generateWithGoogle(prompt);
      case 'openai':
      case 'openrouter':
      case 'ollama':
      case 'custom':
        return this.generateWithPlaceholder(prompt, provider);
      default:
        throw new Error(`Provider ${provider} not supported.`);
    }
  }
  
  async generateKeywords(prompt: string): Promise<string[]> {
    if (!this.ai) {
        throw new Error('Google Gemini AI is not initialized. Please check your API key.');
    }
    const fullPrompt = `Generate a list of 20 relevant long-tail SEO keywords for the following topic. Return only a comma-separated list of keywords, with nothing else. Topic: "${prompt}"`;
    try {
        const response: GenerateContentResponse = await this.ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: fullPrompt
        });
        const text = response.text;
        return text.split(',').map(k => k.trim()).filter(Boolean);
    } catch (error) {
        console.error('Error generating keywords with Google Gemini:', error);
        throw new Error('Failed to generate keywords.');
    }
  }

  private async generateWithGoogle(prompt: string): Promise<string> {
    if (!this.ai) {
      throw new Error('Google Gemini AI is not initialized. Please check your API key.');
    }

    const fullPrompt = `
      You are an expert SEO content writer. Write a high-quality, engaging, and comprehensive article on the following topic.
      The article must have a clear structure with a compelling title, an introduction, multiple subheadings (using H2 tags), and a conclusion.
      The content should be well-researched, informative, and at least 500 words long.
      Ensure the tone is appropriate for the topic. The output must be in HTML format.
      
      Topic: "${prompt}"
    `;

    try {
      const response: GenerateContentResponse = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: fullPrompt,
      });
      return response.text;
    } catch (error) {
      console.error('Error generating article with Google Gemini:', error);
      throw new Error('Failed to generate article content.');
    }
  }
  
  private generateWithPlaceholder(prompt: string, provider: LlmProviderId): Promise<string> {
    console.log(`Simulating article generation for prompt: "${prompt}" with provider: ${provider}`);
    const placeholderContent = `
      <h1>Generated Article about ${prompt}</h1>
      <p>This is a placeholder article generated by the mock <strong>${provider}</strong> service. In a real application, this content would be generated by the selected Language Model.</p>
      <h2>Section 1</h2>
      <p>This section would delve into the first main point about ${prompt}, providing detailed information and insights.</p>
      <h2>Section 2</h2>
      <p>Following up, this part of the article would explore another facet of ${prompt}, keeping the reader engaged.</p>
      <h2>Conclusion</h2>
      <p>This is the concluding paragraph, summarizing the key takeaways about ${prompt}.</p>
    `;
    return new Promise(resolve => setTimeout(() => resolve(placeholderContent), 1500));
  }

  updateApiKey(provider: LlmProviderId, key: string) {
    this.apiKeys.update(keys => ({...keys, [provider]: key}));
  }
}
